<html>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />

<head>
<link href="bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen">

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js" type="text/javascript"></script>
<script src="bootstrap/js/bootstrap.js"></script>
<script src="joose.js" type="text/javascript"></script>
<script src="images.js" type="text/javascript"></script>


<script>


/*
SliderButtonCustom: Utiliza os metodos do SlideShow mas apresenta um botão mais bonito
*/
Role( 'SliderButtonCustom', {
  requires: "start_slide_show",
  methods: {
    ativar_slider: function() {
        this.start_slide_show();
    },
    desativar_slider: function() {
        this.stop_slide_show();
    },
    place_custom_slider_button: function() {
        this.hide_original_slider_btn();
        btn_custom = $( '<div class="btn-slider-custom inativo"><span> ▶ </span></div>' );
        obj_carosel = this;
        btn_custom.click( function() {
          if ( btn_custom.hasClass("inativo" )) {
            btn_custom.removeClass('inativo').addClass('ativo');
            obj_carosel.ativar_slider();
          } else if ( btn_custom.hasClass( 'ativo' ) ) {
            btn_custom.removeClass('ativo').addClass('inativo');
            obj_carosel.desativar_slider();
          }
        } );
        $(this.target).prepend( btn_custom );
    }, 
    hide_original_slider_btn: function() {
        $(this.target).find( 'div.btn-slide-show' ).hide();
    },
  },
  after:{
    start: function() {
      console.log( "[ SliderButtonCustom ] Esconder botao do slide e mostrar um mais bonito, que controla o feião." );
      this.place_custom_slider_button();
    } 
  },
} )


Role( "SlideShow", {
  has: {
    slide_delay: { is: 'rw',init: (function() { return 2 }) }, //inicializa com 2 segundos de delay
    slide_active: { is: 'rw', init: (function() { return false }) },
  },
  methods: {
    start_slide_show: function() {
      console.log( 'Iniciando slide show!' );
      console.log( 'com delay de : ' + this.slide_delay + ' na imagem: ' + this.num_atual );
      this.setSlide_active( true );
      obj_carosel = this;
      setTimeout( function() {
        obj_carosel.slide_run();
      } , this.slide_delay * 1000 );
    },
    stop_slide_show: function () { 
      this.setSlide_active( false );
      console.log( 'Parando slide show!' );
    },
    slide_run: function () {
     console.log('items.length - 1: '+ (this.items.length - 1 ) ); 
console.log( 'true? ' + ( this.num_atual < (this.items.length -1 )) );
     console.log('num_atual: '+ this.num_atual );
      if ( this.slide_active && ( this.num_atual < (this.items.length -1 )) ) {
        this.next();
        obj_carosel = this;
        setTimeout( function() {
          console.log('SlideShow: avancar imagem. img atual: ' + obj_carosel.num_atual );
          obj_carosel.slide_run();
        } , this.slide_delay * 1000 );
      }
    },
    place_slide_show_buttons: function () { 
      console.log( 'Colocando botoes de slide show no lugar.' );
      btn_slide = $( '<div class="btn-slide-show"></div>' );
      slide_input = $('<input type="checkbox" name="slide-show" id="slide-show"/>');
      obj_carosel = this;
      slide_input.click( function() {
        if ( $(this).is(':checked') ) {
          obj_carosel.start_slide_show();
        } else {
          obj_carosel.stop_slide_show();
        }
      } );
      btn_slide.append( slide_input );
      slide_label = $('<label for="slide-show">Slide Show</label>');
      btn_slide.append( slide_label );
      $(this.target).find('div.pic-holder').after( btn_slide );
    },
  },
  after: {
      start: function() { // executa após o método 'start' que está na classe Carousel
          console.log( 'Iníciado Role SlideShow' );//construida
          this.place_slide_show_buttons();
      },
  }
} )

Role( "InfiniteLoop", {
  has: {
    infinite_loop: { is: 'rw', init: (function() { return 1 }), },
    items_original: { is: 'rw' },
  },
  methods: {
      append_items: function() {
          if ( this.num_atual >= ( this.items.length - this.thumb_step ) || this.thumb_step >= ( this.items.length - this.num_last_thumb ) ) {
              // adiciona mais fotos na lista de fotos.(duplica array de fotos pro final)
              for ( i in this.items_original ) {
                this.items.push( this.items_original[i] );
              }
              console.log('TOTAL IMAGENS: ' + this.items.length );
          }
      },
      prepend_items: function() { // ***** loop infinito reverso não vale a pena.. 

      }
  },
  before: {
      prev: function() {
          console.log('PREV - INFINITE LOOP - DO nothing... ');
          //this.prepend_items();
      },
      next: function() {
          console.log('NEXT - INFINITE LOOP');
          this.append_items();
      },
      next_thumb_pics: function () { 
          console.log('NEXT - INFINITE LOOP - next_thumb_pics');
          this.append_items();
      },
      prev_thumb_pics: function () { 
          console.log('PREV - INFINITE LOOP - DO nothing... ');
      },
  },
  after: {
      initialize: function() {
          this.items_original = this.items.slice(0);
      }
  }
} )

Role( "NumeraImagens", {
  methods: {
    numerar_imagens: function() { 
      for ( i in this.items ) {
        numeral = parseInt(i)+1;
        this.items[i].numeracao = numeral + "/" + this.items.length;
      }
    }
  },
  after: {
    initialize: function () {
      this.numerar_imagens();
      console.log( this.items );
    }
  }
} )

Role( "Publicidade", {
  has: {
    views_between_ads: { is: 'rw', init: (function() { return 5 }) }, //quantidade de visualizaçoes entre uma propaganda e outra
    views_actions_count: { is: 'rw', init: (function() { return 0 }) },//conta as visualizacoes /acoes
  },
  methods: {
    show_ad: function() {
      this.setViews_actions_count( this.views_actions_count + 1 );
      console.log( "[Publicidade] Acoes/visualizacoes executadas: " + this.views_actions_count );
      if ( this.views_actions_count >= this.views_between_ads ) {
        this.setViews_actions_count(0); //zera o contador de views
        alert( 'Mostra Propaganda' );
      }
    }
  },
  after: {
    prev: function() {
      this.show_ad();
    },
    next: function() {
      this.show_ad();
    },
    next_thumb_pics: function () { 
      this.show_ad();
    },
    prev_thumb_pics: function () { 
      this.show_ad();
    },
  }
} )

Role( "ThumbMouseOver" , {
  has: {
  },
  methods: {
      show_preview: function( i ) {
          obj_carosel = this;
          $.each( $(this.target).find('div.thumbs ul li') , function(i,item) {
              $(item).unbind('mouseenter').unbind('mouseleave') //retira qualquer mouseenter/leave
              .mouseenter( function() {
                  img_medium = $('<div class="thumb-preview"><img src="'+obj_carosel.items[$(item).attr('num')].medium+'"/></div>');
                  img_medium.click( function() {
                    $(item).closest('li').find('img').first().trigger('click');
                  } );
                  $(this).append( img_medium );
                  console.log('mouse enter foto: ' + $(item).attr('num') );
              } )
              .mouseleave( function() {
                  $(this).find( 'div.thumb-preview' ).remove();
                  console.log('mouse leave foto: ' + $(item).attr('num') );
              } );
          } ); 
      }
  },
  after: {
    start: function() {
      console.log( 'Inicializando ThumbMouseOver' );
    },
    append_thumb: function(i) {
      this.show_preview( i );
    },
    prepend_thumb: function(i) {
      this.show_preview( i );
    },
  },
} )

Role( "ComLegenda", {
  has: {
    container_legenda: { is: 'rw' }
  },
  methods: {
    remove_legenda: function() {
      $(this.target).find('div.legenda').remove();
    },
    mostra_legenda: function(i) {
      console.log( 'Mostrar legenda para foto ' + i );
      title = $( '<span class="titulo">'+this.items[i].title+'</span>' );
      numeracao = "" ;
      if ( typeof this.items[i].numeracao != "undefined"  ) {
        numeracao = $( '<span class="numeracao">'+ this.items[i].numeracao +'</span>' );
      }
      description = $( '<span class="descricao">'+this.items[i].description+'</span>' );
      credits = $( '<span class="descricao">'+this.items[i].credits+'</span>' );
      legenda = $( "<div class='legenda alpha60'></div>" );
      legenda.append( title );
      legenda.append( numeracao );
      legenda.append( description );
      legenda.append( credits );
      this.setContainer_legenda( legenda );
      $(this.target).find('div.pic-holder').after( legenda );
    },
    posicionar_legenda: function(){
      console.log( this.container_legenda );
      console.log( this.container_legenda.height() );
      this.container_legenda.css( 'margin-top', -1*this.container_legenda.height() );
    },
  },
  after: {
    show_pic: function(i) {
      this.mostra_legenda(i);
    },
    mostra_legenda: function(){
      console.log( this.container_legenda );
      this.posicionar_legenda();
    },
  },
  before: {
    mostra_legenda: function(){
      this.remove_legenda();
    }
  }
} )

/*
CarouselBasic: Implementa as features básicas de um carrossel
*/
Role( "CarouselBasic", {
    has: {
        /*
        target: seletor do elemento que conterá o carossel
        */
        target: {is:'rw'},
        /*
        items: lista de objetos contendo imagens. 
        TODO: Verificar formato..
        */
        items:  {is:"rw"},
        /*
        thumb_size: Quantas imagens devem aparecer no thumb ? 
        - thumb_size indica quantas imagens podem aparecer no thumb.
        */
        thumb_size: {is:'rw'},
        /*
        thumb_step: ao carregar mais thumbs, quantos devem ser carregados?
        - indica total de thumbs que devem ser carregados quando adicionar / retirar thumbs
        */
        thumb_step: {is:'rw'},
        /*
        num_atual: sempre possúi o numero/indice da foto atual
        */
        num_atual: {is:'rw'},
        /*
        num_last_thumb: indica qual o número/indice do ultimo thumb mostrado na tela
        */
        num_last_thumb: {is:'rw'},
        /*
        num_first_thumb: indica qual o número/indice do primeiro thumb mostrado na tela
        */
        num_first_thumb: {is:'rw'},
        /*
        div_thumbs: indica qual o DOM que está com os thumbs
        */
        div_thumbs: {is:'rw'},
    },
    methods: {
        update_index_numbers: function() {
            this.update_num_foto_atual();
            this.setNum_last_thumb( parseInt( $(this.target).parent().find('div.thumbs ul li:last').attr('num') ) );
            this.setNum_first_thumb( parseInt( $(this.target).parent().find('div.thumbs ul li:first').attr('num') ) );
        },
        update_num_foto_atual: function () {
              var num_foto_atual = $(this.target).parent().find('div.pic-holder img').attr('num');
              console.log( 'num foto atual: ' + num_foto_atual );
              console.log( 'Total Fotos: ' + this.items.length );
              console.log( 'Total Fotos (originalmnete): ' + this.items_original.length );
              this.setNum_atual( parseInt(num_foto_atual ));
        },
        start: function () {
            console.log('start');
            this.list_thumbs();
            this.create_pic_holder();
            this.show_first_pic();
            this.update_index_numbers();
        },
        thumb_mouseover: function() {
            console.log( 'over thumb' );
        },
        prev: function() {
            console.log('PREV');
            if ( this.num_atual == 0 ) {
                console.log('ja esta na primeira foto');
                return;
            } else if ( this.num_atual == this.num_first_thumb ) {
                //recarrega fotos anteriores no thumb
                this.prev_thumb_pics();
                this.show_pic( this.num_atual - 1 );
            } else {
                //verifica se esta fora do range pra direita no thumb
                if ( this.num_atual - 1 > this.num_last_thumb ) {
                    this.show_pic( this.num_last_thumb );//forca abrir a ultima imagem do thumb
                    return;
                }

                // abre a foto anterior
                this.show_pic( parseInt( this.num_atual ) - 1 );
            }
        },
        next: function() {
            console.log('NEXT');


            //verifica se eh ultima
            if ( this.num_atual == this.items.length ) {
                //ja esta na ultima foto.
                console.log('ja ta na ultima foto');
                return;
            } else if ( this.num_atual == this.num_last_thumb ) { // foto atual é igual a ultima foto do thumb
                console.log('carregar mais imagens');
                //carrega as proximas imagens do thumb
                //moostra a proxima imagem
                this.next_thumb_pics();
                this.show_pic( this.num_atual + 1 );
            } else {
                console.log( 'abrir uma nova foto, ja no thumb' );

                //verifica se a proxima imagem esta no thumb.. se não tiver no thumb tem que determinar o num_atual da primeira imagem no thumb
                if ( this.num_atual + 1 < this.num_first_thumb ) {
                    this.show_pic( this.num_first_thumb );//forca abrir a primeira imagem do thumb
                    return;
                }

                //mostra proxima foto de acordo com num
                this.show_pic( this.num_atual + 1 );
            }
        },
        place_buttons: function () {
            var obj_carosel = this;
            
            //botao NEXT
            var btn_next = $('<div class="btn-carrossel-nav btn-next"><span> >> </span></div>');
            btn_next.bind( 'click', function() { 
              obj_carosel.next();
            } );

            //botao PREV
            var btn_prev = $('<div class="btn-carrossel-nav btn-prev"><span> << </span></div>');
            btn_prev.click( function ( ) {
              obj_carosel.prev();
            } );
            $(this.target).find('div.pic-holder').before(btn_prev).before(btn_next);

            //btn next thumbs
            btn_thumbs_next = $( '<div class="btn-thumb btn-thumb-next"><div> > </div></div>' );
            btn_thumbs_next.click( function () { 
                obj_carosel.update_index_numbers();
                console.log( 'Mostrar mais imagens a partir da imagem: ' + obj_carosel.num_last_thumb );
                obj_carosel.next_thumb_pics( obj_carosel.num_last_thumb );
            } );

            //btn prev thumbs
            btn_thumbs_prev = $( '<div class="btn-thumb btn-thumb-prev"><div> < </div></div>' );
            btn_thumbs_prev.click( function ()  { 
                obj_carosel.update_index_numbers();
                console.log( 'Mostrar mais imagens a partir da imagem: ' + obj_carosel.num_first_thumb );
                obj_carosel.prev_thumb_pics( obj_carosel.num_first_thumb );
            } );

            $(this.div_thumbs).before(btn_thumbs_prev).before(btn_thumbs_next);

            //btn menos thumb
           
        },
        foto_existe: function(i) {
            if ( typeof this.items[i] == 'object' ) {
                console.log( "FOTO: " + i + " existe "  );
                return true;
            } else {
                console.log( "FOTO: " + i + " não existe "  );
                return false;
            }
        } ,
        list_thumbs: function () {
            console.log('listar thumbs');
            //create_thumb_list
            div_thumbs = $('<div class="thumbs"><ul></ul></div>');
            $(this.target).prepend(div_thumbs);
            this.setDiv_thumbs( div_thumbs.find('ul') );
            console.log( this.div_thumbs );
            //list N imagens
            for (i=0;i<this.thumb_size;i++ ) {
                this.append_thumb(i);
            }
        },
        append_thumb: function(i) {
            if ( this.foto_existe(i) ) {
              console.log('Inserindo imagem '+i+' no thumb');
              console.log( images[i] );
              img_thumb = $('<img src="'+images[i].small+'" num="'+i+'">');
              var obj_carosel = this;
              $(img_thumb).click( function() {
                obj_carosel.show_pic( $(this).attr('num') );
              } );
              $(this.div_thumbs).append('<li num="'+i+'"></li>');
              $(this.div_thumbs).find('li[num='+i+']').append(img_thumb);
            }
        } ,
        prepend_thumb: function(i) {
            console.log('Inserindo imagem '+i+' no thumb');
            console.log( images[i] );
            img_thumb = $('<img src="'+images[i].small+'" num="'+i+'">');
            var obj_carosel = this;
            $(img_thumb).click( function() {
                obj_carosel.show_pic( $(this).attr('num') );
            } );
            $(this.div_thumbs).prepend('<li num="'+i+'"></li>');
            $(this.div_thumbs).find('li[num='+i+']').prepend(img_thumb);
        } ,
        remove_thumb: function(i) {
            $( $(this.target).find('div.thumbs ul li:nth-child('+i+')') ).remove();
        },
        show_first_pic: function() {
            this.show_pic(0);//img 0
        },
        show_pic: function (i) {
            if ( this.foto_existe(i) ) {
                $(this.target).find('div.pic-holder').html('<img src="'+images[i].big+'" num="'+i+'">');
                this.border_thumb( i );
            }
        },
        border_thumb: function(i) {
            $.each( $( this.div_thumbs ).find( 'li' ) , function(i,item){
                $(item).removeClass('focused');
            }); 
            $( this.div_thumbs ).find( 'li[num='+i+']' ).addClass('focused');
        },
        create_pic_holder: function () {
            var big_pic_holder = $('<div class="pic-holder"></div>');
            $(this.target).append( big_pic_holder );
        },
        next_thumb_pics: function (num) {
            if ( typeof num == 'undefined' ) 
              num = this.num_atual;

            console.log( 'mostrando next thumbs a partir de ' + num );

            for ( i = num+1; i < num + this.thumb_step; i++ ) {
                if ( this.foto_existe( i ) ) {
                    this.remove_thumb( 1 );//tira primeira foto do thum pra dar mais lugar pras outrs
                    this.append_thumb( i );
                } else {
                    console.log( "foto " + i + " não existe " );
                }
            }
        },
        prev_thumb_pics: function (num) {
            if ( typeof num == 'undefined' ) 
              num = this.num_atual;

            floor = num - this.thumb_step;//no minimo zero. eh o maximo de thumbs que podem aparecer da posicao atual ate o inicio da lista
            if( floor < 0) {
                floor = 0;
            }
            console.log( "FLOOR: " + floor );
            for ( i = num - 1; i >= floor ; i-- ) {
                console.log('existe foto ' + i);
                if ( this.foto_existe( i ) ) {
                    this.remove_thumb( this.thumb_size );//tira a ultima do thumb pra dar lugar pra fotos no inicio do thumb list
                    this.prepend_thumb( i );
                } else {
                    console.log( "foto " + i + " não existe " );
                }
            }
        },
//      initialize: function( args ) { //recebe os mesmos args passados ao construtor
//          console.log( args );
//          console.log( 'Após Inicializar' );
//      }, 
    },
    after: {
        initialize: function() {
            console.log( 'Início' );
            console.log( 'executado após construir o objeto' );
//          console.log( this.target );
//          $(this.target).after( 'AFTER' );
//          console.log('inicializado');
        },
        create_pic_holder: function() {
            this.place_buttons();
        },
        prev: function() {
            this.update_index_numbers();
        },
        next: function() {
            this.update_index_numbers();
        },
        append_thumb: function() {
            this.update_index_numbers();
        },
        prepend_thumb: function() {
            this.update_index_numbers();
        },
        show_pic: function() {
            this.update_index_numbers();
        },
        start: function() {
            this.update_index_numbers();
        },
        next_thumb_pics: function() {
            this.border_thumb( this.num_atual );
        },
        prev_thumb_pics: function() {
            this.border_thumb( this.num_atual );
        },
    },
    before: {
        next_thumb_pics: function() {
            console.log( '- [DEBUG] --------------' );
            console.log( 'next thumb pics' );
            console.log( 'thumb_step: ' + this.thumb_step);
            console.log( 'foto atual: '+this.num_atual);
            console.log( 'tamamnho thumb: ' + this.thumb_size);
            console.log( 'total fotos: '+ this.items.length) ;
        },
        prev_thumb_pics: function() {
            console.log( '- [DEBUG] --------------' );
            console.log( 'next thumb pics' );
            console.log( 'thumb_step: ' + this.thumb_step);
            console.log( 'foto atual: '+this.num_atual);
            console.log( 'tamamnho thumb: ' + this.thumb_size);
            console.log( 'total fotos: '+ this.items.length) ;
        },
    },
} )

/*
Classe carrosel, e os componentes
*/

Class("Carousel", {
    does: [ 
      CarouselBasic,      // Implementa funcionalidade básica do carrossel
      NumeraImagens,      // Ativa numeracao nas imagens
      SlideShow,          // Ativa funcionalidades de Slide Show
      InfiniteLoop,       // Modifica funcionalidade dos botoes: 'proximo','mais thumb'
      Publicidade,        // Implementa uma publicidade que aparece a cada X cliques
      ComLegenda,         // Mostra legenda nas imagens
      SliderButtonCustom, // Esconde o botão padrão do "SlideShow" e cria um novo botão que controla funcionalidade padrão do "SlideShow"
      ThumbMouseOver
    ],
});

var carosel = new Carousel({
  thumb_size: 14,
  target: 'div#imagens',
  items: images,
  thumb_step: 5, //quantidade de itens carregados ao clicar next
  views_between_ads: 10,
});

$(document).ready(function () {
  carosel.start();
  console.log( carosel );
}); 

</script>

<style>

div#imagens-container {
  background: #000000;
  padding: 15px;
  float: left;
}
div#imagens {
  width: 650px;
  float: left;
  background: #000000;
}
div#imagens div.thumbs ul {
  list-style: none;
  float: left;
  overflow: hidden;
  width: 600px;
  height: 40px;
}
div#imagens div.thumbs ul li {
  float: left;
  cursor: pointer;
}
div#imagens div.thumbs ul li img {
  width: 40px;
}
div#imagens div.btn-carrossel-nav {
  cursor: pointer;
  color: #000000;
  font-weight: bold;
  position: absolute;
  height: 40px;
  width: 40px;
  border: 1px solid #454545;
  -webkit-border-radius: 50%; 
  -moz-border-radius:    50%; 
  border-radius: 50%; 
  background: rgb(0, 0, 0);
  background: rgba(0, 0, 0, 0.6);
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)";
  color: #ffffff;
}
div#imagens div.btn-prev {
  margin-top: 150px;
  margin-left: 50px;
}
div#imagens div.btn-next {
  margin-top: 150px;
  margin-left: 550px;
}
div#imagens div.btn-prev span {
    margin-top: 9px;
    margin-left: 10px;
    float:left;
}
div#imagens div.btn-next span {
    margin-top: 9px;
    margin-left: 10px;
    float:left;
}
div#imagens div.btn-thumb {
  background: #000000;
  width: 18px;
  height: 38px;
  position: absolute;
  cursor: pointer;
  color: #FFFFFF;
  float:left;
  border: 1px solid #454545;
}
div#imagens div.btn-thumb-prev {
  margin-top: 0px;
  margin-left: 0px;
}
div#imagens div.btn-thumb-next {
  margin-top: 0px;
  margin-left: 630px;
}

div.thumbs ul li.focused{ 
  border-bottom: 2px solid #FF0011;
}
div.thumbs ul li.focused img { 
  width: 38px !important;
}


/* SLIDE SHOW - INICIO */
div#imagens div.btn-slide-show {
    position:absolute;
    margin-top: -100px;
    margin-left: 10px;
    background: #FFFFFF;
}
div#imagens div.btn-slide-show input {
    float: left;
}
div#imagens div.btn-slide-show label {
    float: left;
}
/* SLIDE SHOW - END */

/* LEGENDA */
.alpha60 {
  background: rgb(0, 0, 0);
  background: rgba(0, 0, 0, 0.6);
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)";
}
div#imagens div.legenda {
  position: relative;
  margin-top: -10px;
  color: #FFFFFF;
  width: 100%;
  float:left;
}
div#imagens div.legenda span {
  float: left;
  clear: left;
}
/* LEGENDA */

/* Custom slider INICIO */
div#imagens div.btn-slider-custom {
  background: #000000;
  position: absolute;
  margin-top: 0;
  margin-left: 585px;
  height: 38px;
  width: 38px;
  border: 1px solid #454545;
  cursor: pointer;
}
div#imagens div.btn-slider-custom.inativo {
  color: #FFFFFF;
}
div#imagens div.btn-slider-custom.ativo {
  color: #333333;
}
div#imagens div.btn-slider-custom span {
padding: 7px 0px 1px 10px;
float: left;
font-size: 20px;
}
/* Custom slider FIM */

/* Thumb preview -inicio */
div#imagens div.thumbs ul li div.thumb-preview {
    height: 100px;
    position: absolute;
    width: 142px;
    z-index: 10;
}
div#imagens div.thumbs ul li div.thumb-preview img {
    height: 100% !important;
    width: 100% !important;
}
/* Thumb preview -end */

</style>


</head>

<body>

  <div class="container">
    <div class="row">
        <div class="span8">Carousel com Joose</div>
        <div class="span4"></div>
    </div>

    <div class="row">
        <div class="span12">
            <div id="imagens-container">
                <div id="imagens">
                </div>
            </div>
        </div>
    </div>

    <div class="row">
      <div class="span12"><h1>Carousel - v0.01 - Carrossel com Joose</h1></div>
    </div>

    <div class="row">
      <div class="span12"><h2>SINOPSYS:</h2></div>
      <div class="span12">
          <p>
              (mais uma) Implementação de um carrosel em Joose. Uma prova de conceito que ficou bem bacana.
          </p>
      </div>
    </div>

    <div class="row">
      <div class="span12"><h2>USO:</h2></div>
      <div class="span12">
          <textarea style="width: 976px; height: 536px;">
            Class("Carousel", {
                does: [
                  CarouselBasic,      // [Obrigatório] Implementa funcionalidade básica do carrossel
                  NumeraImagens,      // [Opcional] Ativa numeracao nas imagens
                  SlideShow,          // [Opcional] Ativa funcionalidades de Slide Show
                  InfiniteLoop,       // [Opcional] Modifica funcionalidade dos botoes: 'proximo','mais thumb'
                  Publicidade,        // [Opcional] Implementa uma publicidade que aparece a cada X cliques
                  ComLegenda,         // [Opcional] Mostra legenda nas imagens
                  SliderButtonCustom  // [Opcional,requer/depende do SlideShow] 
                                      // Esconde o botão padrão do "SlideShow" e cria um novo botão que controla funcionalidade padrão do "SlideShow"
                  ThumbMouseOver      // [Opcional] Implementa funcionalidades de mouseover nas imagens do thumb
                ],
            });

            // Opção #1 de inicialização (passando valores dos atributor no construtor):

            var carosel = new Carousel({
              thumb_size: 14,
              target: 'div#imagens',
              items: images,
              thumb_step: 5, //quantidade de itens carregados ao clicar next
              views_between_ads: 10, // Quantidade de fotos/acoes realizadas antes de mostrar publicidade
            });

            $(document).ready(function () {
              carosel.start();
              console.log( carosel );
            }); 

            // Opção #2 de inicialização (cria instancia sem passar argumentos.):
            var carosel = new Carousel();
            $(document).ready(function () {
            //console.log(carosel);
              carosel.setThumb_size(15);
              carosel.setTarget('div#imagens');
              carosel.setItems( images );
              carosel.setThumb_step( 5 );
              console.log(carosel);
              carosel.start();
            }); 

          </textarea>
      </div>
    </div>

    <div class="row">
      <div class="span12"><h2>Roles</h2></div>
    </div>

    <div class="row">
      <div class="span2">Roles disponíveis:</div>
      <div class="span10">
          <ul style="list-style:none;">
              <li><a href="#CarouselBasic">CarouselBasic</a></li>
              <li><a href="#NumeraImagens">NumeraImagens</a></li>
              <li><a href="#SlideShow">SlideShow</a></li>
              <li><a href="#InfiniteLoop">InfiniteLoop</a></li>
              <li><a href="#Publicidade">Publicidade</a></li>
              <li><a href="#SliderButtonCustom">SliderButtonCustom</a></li>
              <li><a href="#ComLegenda">ComLegenda</a></li>
              <li><a href="#ThumbMouseOver">ThumbMouseOver</a></li>
          </ul>
      </div>
    </div>

    <div class="row" id="CarouselBasic">
      <div class="span12"><h3>CarouselBasic:</h3></div>
      <div class="span12">
          <p>
          Implementa funcionalidade básica do carrossel. 
          <br>
          Esta role contem os métodos considerados básicos para a implementação de um carrossel.
          <br>
          Esta classe inicia a montagem do carrosel, adiciona os botões e ativa a navegação entre imagens e lista de thumbs.
          </p>
      </div>
    </div>

    <div class="row" id="NumeraImagens">
      <div class="span12"><h3>NumeraImagens:</h3></div>
      <div class="span12">
          <p>
          Ativa numeracao nas imagens
          <br>
          Esta role passa por cada imagem carregada no carrosel e adiciona uma numeração na imagem.
          <br>
          A numeração fica no formato: 1/100, 2/100, etc.
          </p>
      </div>
    </div>

    <div class="row" id="SlideShow">
      <div class="span12"><h3>SlideShow:</h3></div>
      <div class="span12">
          <p>
          Ativa funcionalidades básicas de Slide Show.
          <br>
          Esta role utiliza os métodos do CarouselBasic. Ou seja, 
          <br>
          o slide show controla as ações de 'próxima imagem', 
          <br>
          'imagem anterior' que estão implementadas no CarroselBasic.
          </p>
      </div>
    </div>

    <div class="row" id="InfiniteLoop">
      <div class="span12"><h3>InfiniteLoop:</h3></div>
      <div class="span12">
          <p>
          Simplesmente modifica funcionalidade dos botoes: 
          <br>
            'proximo','mais thumb'
          <br>
          e, faz eles continuarem a carregar imagens mesmo que cheguem ao final da lista de imagens.
          </p>
      </div>
    </div>

    <div class="row" id="Publicidade">
      <div class="span12"><h3>Publicidade:</h3></div>
      <div class="span12">
          <p>
          Ativa funcionalidades para publicidade. Utiliza o valor do atributo:  
          <br>
          <strong>views_between_ads</strong>
          <br>
          Este atributo indica quantas imagens/ações podem ser executadas para mostrar uma publicidade.
          </p>
      </div>
    </div>

    <div class="row" id="SliderButtonCustom">
      <div class="span12"><h3>SliderButtonCustom:</h3></div>
      <div class="span12">
          <p>
          O SlideShow coloca um input bastante feio para controlar o slide show. 
          <br>
          Esta classe esconde esse botão feio e cria um outro (mais bonito) que controla esse feio.
          </p>
      </div>
    </div>


    <div class="row" id="ComLegenda">
      <div class="span12"><h3>ComLegenda:</h3></div>
      <div class="span12">
          <p>
          Mostra legenda nas imagens. Utiliza os campos 'descricao', 'titulo', 'credits' das imagens.
          </p>
      </div>
    </div>


    <div class="row" id="ThumbMouseOver">
      <div class="span12"><h3>ThumbMouseOver:</h3></div>
      <div class="span12">
          <p>
          Mostra uma imagem em miniatura ao passar mouse por cima do thumb.
          Tambem implementa um click na imagem miniatura, que abre a imagem grande.
          </p>
      </div>
    </div>


    <div class="row">
      <div class="span12"><h4>Apêndice</h4></div>
      <div class="span12"><h5>Joose</h5></div>
      <div class="span12">
          <p>
          <br>// Documentação sobre o construtor: (como alterar, como funciona, etc)
          <br>http://openjsan.org/doc/s/sa/samuraijack/Joose/3.006/lib/Joose/Manual/Construction.html
          <br>http://openjsan.org/doc/s/sa/samuraijack/Joose/3.006/
          </p>
      </div>
      <div class="span12"><h4>after? before? around? pra que isto?</h4></div>
      <div class="span12">
          <p>
          A grande vantagem de utilizar before, after e around é a possibilidade de 'grudar e modificar' rotinas nos métodos, sem mexer na implementação original do método.
          <br><br>
          Quando queremos alterar um método em um módulo externo, temos 2 possibilidades: 
          <br>
              - re-implementar/copiar o método inteiro (repetindo código/pessimo).  //menos código menos bugs
          <br>
              - utilizar before, after ou around
          <br>

          <br>
          <br>
          Por exemplo: Se eu tenho várias classes utilizando um método, e eu quero apenas executar algo ao final do método, posso usar um 'after'... então eu coloco na minha classe 'after metodo X, execute Y'. Dessa maneira posso ter certeza que não vou quebrar a funcionalidade original das classes que ja utilizam esse metodo. E , vou continuar usando o mesmo método (ou seja não vou repetir o mesmo método duas vezes).
          <br>
          <br>
          Outro exemplo é o método 'initialize', que existe em todas as classes/roles Joose... supondo que eu quero executar um código logo após o initialize... se eu mexer no método 'initialize', eu teria que re-implementar o método inteiro apenas para adicioinar uma nova linha (que eu quero executar ao final do initialize). 
          <br>
          Mas utilizando before ou after, eu consigo executar essa linha de código após o método sem precisar mexer no método original em si. 
          <br>
          <br>
          A vantagem é que eu consigo alterar a rotina do método sem necessariamente mexer no método.
          </p>
      </div>
    </div>

    <div class="row">
      <div class="span12"><h6>Autor</h6></div>
      <div class="span12">
        Hernan Lopes
      </div>
    </div>

    </div>

  </div>

</body>

</html>
